/* eslint-disable no-useless-catch */
import { userModel } from '../models/userModel'
import ApiError from '~/utils/ApiError'
import { StatusCodes } from 'http-status-codes'
import bcryptjs from 'bcryptjs'
import { v4 as uuidv4 } from 'uuid'
import { pickUser } from '~/utils/formatter'
import { WEBSITE_DOMAIN } from '~/utils/constants'
import { BrevoProvider } from '~/providers/BrevoProvider'
import { env } from '~/config/environment'
import { JwtProvider } from '~/providers/JwtProvider'
import { CloudinaryProvider } from '~/providers/CloudinaryProvider'
import { cartModel } from '~/models/cartModel'
import { DEFAULT_ITEMS_PER_PAGE, DEFAULT_PAGE } from '~/utils/constants'

const createNew = async (reqBody) => {
  try {
  //Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng hay ch∆∞a
    const existUser = await userModel.findOneByEmail(reqBody.email)
    if (existUser) {
      throw new ApiError(StatusCodes.CONFLICT, 'Email already exists!')
    }

    // T·∫°o data ƒë·ªÉ l∆∞u v√†o DB
    // const name = reqBody.name || reqBody.email.split('@')[0]
    // L·∫•y name t·ª´ email (chuhongminh@gmail.com => chuhongminh)
    const nameFromEmail = reqBody.email.split('@')[0]
    const newUserData = {
      email: reqBody.email,
      password: bcryptjs.hashSync(reqBody.password, 8), // M√£ h√≥a password - tham s·ªë th·ª© 2 l√† ƒë·ªô ph·ª©c t·∫°p c·ªßa password, gi√° tr·ªã c√†ng cao th√¨ bƒÉm c√†ng l√¢u
      username: nameFromEmail,
      displayName: nameFromEmail, // M·∫∑c ƒë·ªãnh ƒë·ªÉ gi·ªëng username khi user ƒëƒÉng k√≠ m·ªõi, v·ªÅ sau l√†m t√≠nh nƒÉng update cho user
      verifyToken: uuidv4()
    }
    // Th·ª±c hi·ªán l∆∞u th√¥ng tin user v√†o DB
    const createdUser = await userModel.createNew(newUserData)
    const getNewUser = await userModel.findOneById(createdUser.insertedId)

    // G·ª≠i email cho ng∆∞·ªùi d√πng x√°c th·ª±c t√†i kho·∫£n
    const verificationLink = `${WEBSITE_DOMAIN}/account/verification?email=${getNewUser.email}&token=${getNewUser.verifyToken}`
    const customSubject = 'Please verify your email before using our service!'
    const htmlContent = `
       <h3>Here is your verification link:</h3>
       <h3>${verificationLink}</h3> 
       <h3>Sincerely,<br/>- Chu Hong Minh -</h3> 
    `

    // G·ªçi t·ªõi Provider ƒë·ªÉ g·ª≠i mail
    await BrevoProvider.sendEmail(getNewUser.email, customSubject, htmlContent)
    // T·∫°o cart cho user m·ªõi
    await cartModel.createNew({ 
      userId: typeof getNewUser._id === 'object' ? getNewUser._id.toString() : getNewUser._id,
      items: []
    })
    // Return tr·∫£ v·ªÅ d·ªØ li·ªáu cho t·∫ßng Controller
    return pickUser(getNewUser)
  } catch (error) { throw error }
}

const verifyAccount = async (reqBody) => {
  try {
    // Query user trong DB
    const existUser = await userModel.findOneByEmail(reqBody.email)

    // C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser) throw new ApiError( StatusCodes.NOT_FOUND, 'Account not found!')
    if (existUser.isActive) throw new ApiError( StatusCodes.NOT_ACCEPTABLE, 'Your account is already active!')
    if (reqBody.token !== existUser.verifyToken) throw new ApiError( StatusCodes.NOT_ACCEPTABLE, 'Token is invalid')

    // N·∫øu m·ªçi th·ª© Ok ==> update th√¥ng tin user ƒë·ªÉ verify account
    const updateData = {
      isActive: true,
      verifyToken: null
    }
    const updatedUser = await userModel.update(existUser._id, updateData)
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu cho FE
    return pickUser(updatedUser)

  } catch (error) { throw error }
}

const login = async (reqBody) => {
  try {
    // Query user trong DB
    const existUser = await userModel.findOneByEmail(reqBody.email)

    // C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser) throw new ApiError( StatusCodes.NOT_FOUND, 'Account not found!')
    if (!existUser.isActive) throw new ApiError( StatusCodes.NOT_ACCEPTABLE, 'Your account is not active!')
    // Ki·ªÉm tra m·∫≠t kh·∫©u (TH error)
    if (!bcryptjs.compareSync(reqBody.password, existUser.password)) {
      throw new ApiError( StatusCodes.NOT_ACCEPTABLE, 'Your Email or Password is incorrect!')
    }

    // N·∫øu m·ªçi th·ª© ok => t·∫°o token ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£ cho ph√≠a FE
    // T·∫°o Th√¥ng tin ƒë·ªÉ ƒë√≠nh k√®m trong JWT Token bao g·ªìm _id v√† email c·ªßa user
    const userInfo = {
      _id:existUser._id,
      email:existUser.email
    }
    // T·∫°o ra 2 lo·∫°i token l√† accessToken v√† refreshToken ƒë·ªÉ tr·∫£ cho ph√≠a FE
    const accessToken = await JwtProvider.generateToken(
      userInfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      env.ACCESS_TOKEN_LIFE
    )

    const refreshToken = await JwtProvider.generateToken(
      userInfo,
      env.REFRESH_TOKEN_SECRET_SIGNATURE,
      env.REFRESH_TOKEN_LIFE)
    //Tr·∫£ v·ªÅ th√¥ng tin user k√®m theo hai c√°i token v·ª´a ƒë∆∞·ª£c t·∫°o ra
    return { accessToken, refreshToken, ...pickUser(existUser) }
  } catch (error) { throw error }
}

const refreshToken = async (clientRefreshToken) => {
  try {
    //Verify / Gi·∫£i m√£ v√† x√°c th·ª±c refresh Token c√≥ h·ª£p l·ªá hay kh√¥ng
    const refreshTokenDecoded = await JwtProvider.verifyToken(
      clientRefreshToken,
      env.REFRESH_TOKEN_SECRET_SIGNATURE
    )
    // ƒêo·∫°n n√†y v√¨ ch√∫ng ta ch·ªâ l∆∞u th√¥ng tin unique v√† c·ªë ƒë·ªãnh c·ªßa user trong token r·ªìi, v√¨ v·∫≠y c√≥ th·ªÉ l·∫•y lu√¥n t·ª´ decoded ra, ti·∫øt ki·ªám query v√†o DB ƒë·ªÉ l·∫•y data m·ªõi
    // t·∫°o accessToken m·ªõi
    const userinfo = {
      _id: refreshTokenDecoded._id,
      email: refreshTokenDecoded.email
    }

    const accessToken = await JwtProvider.generateToken(
      userinfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      env.ACCESS_TOKEN_LIFE
      // 5
    )
    return { accessToken }
  } catch (error) { throw error }
}

const update = async (userId, reqBody, userAvatarFile) => {
  try {
    // Query user trong DB
    const existUser = await userModel.findOneById(userId)
    if (!existUser) throw new ApiError( StatusCodes.NOT_FOUND, 'Account not found!')
    if (!existUser.isActive) throw new ApiError( StatusCodes.NOT_ACCEPTABLE, 'Your account is not active!')
    // N·∫øu m·ªçi th·ª© ok => update displayName
    let updatedUser = {}
    // TH change password
    if (reqBody.current_password && reqBody.new_password) {
      // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
      if (!bcryptjs.compareSync(reqBody.current_password, existUser.password)) {
        throw new ApiError( StatusCodes.NOT_ACCEPTABLE, 'Your current password is incorrect!')
      }
      // N·∫øu m·∫≠t kh·∫©u c≈© ƒë√∫ng th√¨ m·ªõi cho ph√©p update m·∫≠t kh·∫©u m·ªõi
      updatedUser = await userModel.update(userId, {
        password: bcryptjs.hashSync(reqBody.new_password, 8)
      })

    } else if (userAvatarFile) {
      // TH upload file l√™n cloud storage (cloudinary)
      const uploadResult = await CloudinaryProvider.streamUpload(userAvatarFile.buffer, 'user_avatar')
      console.log('üöÄ ~ update ~ uploadResult:', uploadResult)

      // L∆∞u l·∫°i url (secure_url) c·ªßa file ·∫£nh v√†o DB
      updatedUser = await userModel.update(userId, {
        avatar: uploadResult.secure_url
      })

    } else {
      // TH update c√°c th√¥ng tin chung nh∆∞ displayName
      updatedUser = await userModel.update(userId, reqBody)
    }
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu cho FE
    return pickUser(updatedUser)

  } catch (error) { throw error }
}

const getAllUsers = async (page, itemsPerPage ) => {
  try {
    // N·∫øu kh√¥ng c√≥ gi√° tr·ªã page ho·∫∑c itemsPerPage ƒë∆∞·ª£c truy·ªÅn t·ª´ FE, g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh
    if (!page) page = DEFAULT_PAGE
    if (!itemsPerPage) itemsPerPage = DEFAULT_ITEMS_PER_PAGE

    const results = await userModel.getAllUsers(parseInt(page, 10), parseInt(itemsPerPage, 10))

    return results
  } catch (error) { throw error }
}

const findCartByUserId = async (userid) => {
  try {
    const result = await cartModel.findOneByUserId(userid)
    return result
  } catch (error) {
    throw error
  }
}

const deleteUser = async (userId) => {
  try {
    const cart = await findCartByUserId(userId)
    if (cart) {
      await cartModel.deleteOneById(cart._id)
    }
    const result = await userModel.deleteOneById(userId)
    return result
  } catch (error) {
    throw error
  }
}
export const userService = {
  createNew,
  login,
  verifyAccount,
  refreshToken,
  update,
  getAllUsers,
  findCartByUserId,
  deleteUser
}